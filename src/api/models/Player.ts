/* tslint:disable */
/* eslint-disable */
/**
 * Beat Link Trigger Overlay API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import type { Time } from './Time'
import { TimeFromJSON, TimeFromJSONTyped, TimeToJSON } from './Time'
import type { Track } from './Track'
import { TrackFromJSON, TrackFromJSONTyped, TrackToJSON } from './Track'

/**
 *
 * @export
 * @interface Player
 */
export interface Player {
  /**
   * The IP address at which the player can be found on the network.
   * @type {string}
   * @memberof Player
   */
  address: string
  /**
   * The beat currently playing, if known. The first beat of the track is beat 1, and they increment steadily from there.
   * @type {number}
   * @memberof Player
   */
  beatNumber: number
  /**
   * Tracks progress through measures of the song. The first (down) beat of a measure has the value 1, then it grows to 4 before jumping back to 1 at the start of the next bar.
   * @type {number}
   * @memberof Player
   */
  beatWithinBar: number
  /**
   *
   * @type {number}
   * @memberof Player
   */
  cueCountdown: number
  /**
   * Tracks how many beats remain until the next hot cue or memory point in the track. If there are no cues left in the track, or if the next one is more than 64 bars from now, this has the value 511. If there is a cue coming up within 64 bars (256 beats), this will count down those beats, from the value 256 to 0, meaning we have reached the cue. As soon as the next beat arrives, it will start tracking the next hot cue or memory point.
   * @type {string}
   * @memberof Player
   */
  cueCountdownDisplay: string
  /**
   *
   * @type {string}
   * @memberof Player
   */
  firmwareVersion: string
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isAtEnd: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isBpmOnlySynced: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isBusy: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isCued: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isLooping: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isOnAir: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPaused: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPlaying: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPlayingBackwards: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPlayingCdjMode: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPlayingForwards: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isPlayingVinylMode: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isSearching: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isSynced: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isTempoMaster: boolean
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  isTrackLoaded: boolean
  /**
   *
   * @type {string}
   * @memberof Player
   */
  kind: string
  /**
   *
   * @type {string}
   * @memberof Player
   */
  name: string
  /**
   *
   * @type {number}
   * @memberof Player
   */
  number: number
  /**
   *
   * @type {number}
   * @memberof Player
   */
  pitch: number
  /**
   *
   * @type {string}
   * @memberof Player
   */
  pitchDisplay: string
  /**
   *
   * @type {number}
   * @memberof Player
   */
  pitchMultiplier: number
  /**
   *
   * @type {number}
   * @memberof Player
   */
  tempo: number
  /**
   *
   * @type {Time}
   * @memberof Player
   */
  timePlayed: Time
  /**
   *
   * @type {Time}
   * @memberof Player
   */
  timeRemaining: Time
  /**
   *
   * @type {Track}
   * @memberof Player
   */
  track: Track
  /**
   *
   * @type {number}
   * @memberof Player
   */
  trackBpm: number
  /**
   *
   * @type {number}
   * @memberof Player
   */
  trackNumber: number
  /**
   *
   * @type {number}
   * @memberof Player
   */
  trackSourcePlayer: number
}

/**
 * Check if a given object implements the Player interface.
 */
export function instanceOfPlayer(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'address' in value
  isInstance = isInstance && 'beatNumber' in value
  isInstance = isInstance && 'beatWithinBar' in value
  isInstance = isInstance && 'cueCountdown' in value
  isInstance = isInstance && 'cueCountdownDisplay' in value
  isInstance = isInstance && 'firmwareVersion' in value
  isInstance = isInstance && 'isAtEnd' in value
  isInstance = isInstance && 'isBpmOnlySynced' in value
  isInstance = isInstance && 'isBusy' in value
  isInstance = isInstance && 'isCued' in value
  isInstance = isInstance && 'isLooping' in value
  isInstance = isInstance && 'isOnAir' in value
  isInstance = isInstance && 'isPaused' in value
  isInstance = isInstance && 'isPlaying' in value
  isInstance = isInstance && 'isPlayingBackwards' in value
  isInstance = isInstance && 'isPlayingCdjMode' in value
  isInstance = isInstance && 'isPlayingForwards' in value
  isInstance = isInstance && 'isPlayingVinylMode' in value
  isInstance = isInstance && 'isSearching' in value
  isInstance = isInstance && 'isSynced' in value
  isInstance = isInstance && 'isTempoMaster' in value
  isInstance = isInstance && 'isTrackLoaded' in value
  isInstance = isInstance && 'kind' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'number' in value
  isInstance = isInstance && 'pitch' in value
  isInstance = isInstance && 'pitchDisplay' in value
  isInstance = isInstance && 'pitchMultiplier' in value
  isInstance = isInstance && 'tempo' in value
  isInstance = isInstance && 'timePlayed' in value
  isInstance = isInstance && 'timeRemaining' in value
  isInstance = isInstance && 'track' in value
  isInstance = isInstance && 'trackBpm' in value
  isInstance = isInstance && 'trackNumber' in value
  isInstance = isInstance && 'trackSourcePlayer' in value

  return isInstance
}

export function PlayerFromJSON(json: any): Player {
  return PlayerFromJSONTyped(json, false)
}

export function PlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Player {
  if (json === undefined || json === null) {
    return json
  }
  return {
    address: json['address'],
    beatNumber: json['beat-number'],
    beatWithinBar: json['beat-within-bar'],
    cueCountdown: json['cue-countdown'],
    cueCountdownDisplay: json['cue-countdown-display'],
    firmwareVersion: json['firmware-version'],
    isAtEnd: json['is-at-end'],
    isBpmOnlySynced: json['is-bpm-only-synced'],
    isBusy: json['is-busy'],
    isCued: json['is-cued'],
    isLooping: json['is-looping'],
    isOnAir: json['is-on-air'],
    isPaused: json['is-paused'],
    isPlaying: json['is-playing'],
    isPlayingBackwards: json['is-playing-backwards'],
    isPlayingCdjMode: json['is-playing-cdj-mode'],
    isPlayingForwards: json['is-playing-forwards'],
    isPlayingVinylMode: json['is-playing-vinyl-mode'],
    isSearching: json['is-searching'],
    isSynced: json['is-synced'],
    isTempoMaster: json['is-tempo-master'],
    isTrackLoaded: json['is-track-loaded'],
    kind: json['kind'],
    name: json['name'],
    number: json['number'],
    pitch: json['pitch'],
    pitchDisplay: json['pitch-display'],
    pitchMultiplier: json['pitch-multiplier'],
    tempo: json['tempo'],
    timePlayed: TimeFromJSON(json['time-played']),
    timeRemaining: TimeFromJSON(json['time-remaining']),
    track: TrackFromJSON(json['track']),
    trackBpm: json['track-bpm'],
    trackNumber: json['track-number'],
    trackSourcePlayer: json['track-source-player'],
  }
}

export function PlayerToJSON(value?: Player | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    address: value.address,
    'beat-number': value.beatNumber,
    'beat-within-bar': value.beatWithinBar,
    'cue-countdown': value.cueCountdown,
    'cue-countdown-display': value.cueCountdownDisplay,
    'firmware-version': value.firmwareVersion,
    'is-at-end': value.isAtEnd,
    'is-bpm-only-synced': value.isBpmOnlySynced,
    'is-busy': value.isBusy,
    'is-cued': value.isCued,
    'is-looping': value.isLooping,
    'is-on-air': value.isOnAir,
    'is-paused': value.isPaused,
    'is-playing': value.isPlaying,
    'is-playing-backwards': value.isPlayingBackwards,
    'is-playing-cdj-mode': value.isPlayingCdjMode,
    'is-playing-forwards': value.isPlayingForwards,
    'is-playing-vinyl-mode': value.isPlayingVinylMode,
    'is-searching': value.isSearching,
    'is-synced': value.isSynced,
    'is-tempo-master': value.isTempoMaster,
    'is-track-loaded': value.isTrackLoaded,
    kind: value.kind,
    name: value.name,
    number: value.number,
    pitch: value.pitch,
    'pitch-display': value.pitchDisplay,
    'pitch-multiplier': value.pitchMultiplier,
    tempo: value.tempo,
    'time-played': TimeToJSON(value.timePlayed),
    'time-remaining': TimeToJSON(value.timeRemaining),
    track: TrackToJSON(value.track),
    'track-bpm': value.trackBpm,
    'track-number': value.trackNumber,
    'track-source-player': value.trackSourcePlayer,
  }
}
